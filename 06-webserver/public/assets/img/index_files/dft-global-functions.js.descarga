"use strict";
var dft_carousel = {
	init: function() {
		if($(".dft-card-carousel").length)
			for(var a = 0; a < $(".dft-card-carousel").length; a++) this._carousel($(".dft-card-carousel")[a])
	},
	_carousel: function(a) {
		var b = {
			main: $(a),
			items: $(a).find(".dft-card-carousel__item"),
			dots: $(a).find(".dft-card-carousel__nav"),
			wrapper: {
				el: $(a).find(".dft-card-carousel__mask"),
				total: 0
			},
			swipe: {
				start: 0,
				end: 0,
				right: 0,
				left: 0,
				moving: 0,
				moveLeft: !1,
				moveRight: !1
			},
			click: {
				moving: 0
			},
			device: {
				mobile: navigator.userAgent.match(/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i)
			},
			_resize: function() {
				window.addEventListener("resize", function() {
					b._mobile()
				}, !0)
			},
			_mobile: function() {
				window.innerWidth <= 767 ? $(this.wrapper.el).attr("style") || this._wrapperWidth() : this._desktop()
			},
			_desktop: function() {
				this.wrapper.el.removeAttr("style"), this.wrapper.total = 0, this.swipe.moving = 0, this.click.moving = 0, this._resetActiveItems()
			},
			_resetActiveItems: function() {
				this.main.find(".dft-card-carousel__item").eq(0).hasClass("active") || this.dots.find(".dft-card-carousel__nav-dots").eq(0).hasClass("active") || (this.dots.find(".dft-card-carousel__nav-dots").removeClass("active"), this.main.find(".dft-card-carousel__item").removeClass("active"), this.dots.find(".dft-card-carousel__nav-dots").eq(0).addClass("active"), this.main.find(".dft-card-carousel__item").eq(0).addClass("active"))
			},
			_wrapperWidth: function() {
				for(var a = 0; a < this.items.length; a++) this.wrapper.total += $(this.items[a]).outerWidth() + parseInt($(this.items[a]).css("margin-right"));
				this.wrapper.el.width(this.wrapper.total)
			},
			_actionItemsMobile: function() {
				for(var a = void 0, c = 0; c < this.items.length; c++) this.items[c].addEventListener("touchstart", function(c) {
					a = $(this), b.swipe.start = c.changedTouches[0].clientX, b.swipe.right = b.swipe.start + 50, b.swipe.left = b.swipe.start - 50
				}), this.items[c].addEventListener("touchend", function(c) {
					b.swipe.end = c.changedTouches[0].clientX, b.swipe.start != b.swipe.end && (b.swipe.right < b.swipe.end ? (b.swipe.moveRight = !0, b.swipe.moveLeft = !1) : b.swipe.left > b.swipe.end ? (b.swipe.moveRight = !1, b.swipe.moveLeft = !0) : (b.swipe.moveRight = !1, b.swipe.moveLeft = !1), b._movingItemsMobile(a))
				})
			},
			_movingItemsMobile: function(a) {
				var c = this.dots.find(".dft-card-carousel__nav-dots.active");
				1 == a.prev().data("target") && b.swipe.moveRight ? (this.swipe.moving = 0, a.removeClass("active"), a.prev().addClass("active"), c.prev().addClass("active"), c.removeClass("active")) : a.next().length && b.swipe.moveLeft ? (this.swipe.moving -= a.innerWidth() + parseInt(a.css("margin-right")), a.removeClass("active"), a.next().addClass("active"), c.next().addClass("active"), c.removeClass("active")) : a.prev().length && b.swipe.moveRight && (this.swipe.moving += a.prev().innerWidth() + parseInt(a.prev().css("margin-right")), a.removeClass("active"), a.prev().addClass("active"), c.prev().addClass("active"), c.removeClass("active")), this.wrapper.el.animate({
					left: this.swipe.moving
				}, 800)
			},
			_movingItems: function(a) {
				var b = a.data("dot"),
					c = this.dots.find(".dft-card-carousel__nav-dots.active"),
					d = this.main.find(".dft-card-carousel__item.active"),
					e = b - d.data("target"),
					f = d.data("target") - b;
				if(1 == b) this.click.moving = 0;
				else if(d.data("target") < b)
					for(var g = 0; g < e; g++) this.click.moving -= this.main.find(".dft-card-carousel__item").eq(g).innerWidth() + parseInt(this.main.find(".dft-card-carousel__item").eq(g).css("margin-right"));
				else if(d.data("target") > b)
					for(var g = f; g > 0; g) this.click.moving += this.main.find(".dft-card-carousel__item").eq(g).innerWidth() + parseInt(this.main.find(".dft-card-carousel__item").eq(g).css("margin-right"));
				c.removeClass("active"), d.removeClass("active"), a.addClass("active"), this.main.find('.dft-card-carousel__item[data-target="' + b + '"]').addClass("active"), this.wrapper.el.animate({
					left: this.click.moving
				}, 1e3)
			},
			_clickDots: function() {
				this.dots.find(".dft-card-carousel__nav-dots").on("click touchend", function() {
					$(this).hasClass("active") || b._movingItems($(this))
				})
			},
			_validateDevice: function() {
				this.device.mobile && window.innerWidth <= 767 ? this._actionItemsMobile() : this.device.mobile && window.innerWidth > 767 ? this.wrapper.el.parents(".dft-card-carousel").addClass("no-touch") : (this.wrapper.el.parents(".dft-card-carousel").addClass("no-touch"), b._clickDots())
			}
		};
		b._validateDevice(), b._mobile(), b._resize()
	}
};
$(document).ready(function() {
	dft_carousel.init();
	$("div.dft-nav-nowrap,nav.dft-nav-nowrap").closest("section").addClass("dft-nav-nowrap");
});
var dft_content_titleImage = {
	init: function() {
		if(document.querySelectorAll(".dft-content-titleImage").length) {
			var a = document.querySelectorAll(".dft-content-titleImage");
			this.load(a)
		}
	},
	load: function(a) {
		var b = {
			device: navigator.userAgent.toLowerCase(),
			goggle: !1,
			apple: !1,
			_initialize: function() {
				this._device(), this._process()
			},
			_device: function() {
				this.device.match(/iphone|ipad|ipod|macintosh/i) ? this.apple = !0 : this.google = !0
			},
			_process: function() {
				for(var c = void 0, d = 0; d < a.length; d++) c = JSON.parse(a[d].dataset.app), this.apple ? null !== c.apple[d] ? (a[d].querySelector(".dft-info").remove(), a[d].querySelector(".dft-tooltip-out").setAttribute("data-tooltip", '{"name":"App Store", "link": "' + c.apple[d] + '", "target":"_blank", "direction":"top"}'), a[d].querySelector(".dft-content-titleImage__app").classList.add("es-apple")) : (a[d].querySelector(".dft-info").classList.remove("hidden"), a[d].querySelector(".dft-tooltip-out").remove()) : null !== c.google[d] ? (this.device.match(/trident/i) ? $(this).remove(a[d]) : a[d].querySelector(".dft-info").remove(), a[d].querySelector(".dft-tooltip-out").setAttribute("data-tooltip", '{"name":"Play Store", "link": "' + c.google[d] + '", "target":"_blank", "direction":"top"}'), a[d].querySelector(".dft-content-titleImage__app").classList.add("es-google")) : (a[d].querySelector(".dft-info").classList.remove("hidden"), a[d].querySelector(".dft-tooltip-out").remove())
			}
		};
		b._initialize()
	}
};
document.addEventListener("DOMContentLoaded", function() {
	dft_content_titleImage.init()
}, !1);
var dft_nav_nowrap = {
	init: function() {
		var a = this;
		document.addEventListener("DOMContentLoaded", function() {
			document.querySelector(".dft-nav-nowrap") && a.load(document.querySelector(".dft-nav-nowrap"))
		}, !1)
	},
	load: function(a) {
		var b = {
			scroll: {
				current: window.scrollY
			},
			off: 0,
			devices: {
				web: window.innerWidth > 992 ? !0 : !1,
				mobile: window.innerWidth <= 992 ? !0 : !1
			},
			countTime: 0,
			_initialize: function() {
				this._catchMenus()
			},
			_openComponents: function() {
				return window.innerWidth <= 992 && !b.menus.mobile.classList.contains("open-help") ? !0 : window.innerWidth > 992 && !b.menus.web.classList.contains("open-help") ? !0 : !1
			},
			_catchPositionMenu: function() {
				b.menus.mobile.classList.contains("hidden") && b.menus.web.classList.contains("hidden") || !(window.pageYOffset >= this.off - a.clientHeight) || a.classList.add("fixed", "down")
			},
			_scroll: function() {
				window.addEventListener("scroll", function() {
					b._fixed()
				}, !1)
			},
			_fixed: function() {
				b._openComponents() && (window.pageYOffset >= this.off - a.clientHeight ? (a.classList.add("fixed"), !b.menus.mobile.classList.contains("hidden") && this.devices.mobile || !b.menus.web.querySelector(".dft-header-nav__wrap-bottom").classList.contains("hidden") && this.devices.web ? a.classList.add("down") : a.classList.remove("down")) : window.pageYOffset + a.clientHeight < this.off + a.clientHeight && a.classList.remove("fixed", "down")), b.scroll.current = window.pageYOffset
			},
			_catchMenus: function() {
				var b = this,
					c = setInterval(function() {
						document.querySelectorAll("#main-header > section").length && (b.menus = {
							mobile: document.querySelectorAll("#main-header > section")[0],
							web: document.querySelectorAll("#main-header > section")[1]
						}, setTimeout(function() {
							b.off = a.offsetTop, b._scroll(), b._catchPositionMenu(), b.countTime++
						}, 650)), clearInterval(c)
					}, 650)
			}
		};
		//b._initialize()
	}
};
//dft_nav_nowrap.init();
var dft_overlay_content = {
	init: function() {
		for(var a = document.querySelectorAll(".dft-overlay-content"), b = 0; b < a.length; b++) this.load(a[b])
	},
	load: function(a) {
		var b = {
			device: navigator.userAgent.match(/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i),
			_initialize: function() {
				this._actionButton(), this._mobile()
			},
			_mobile: function() {
				this.device && window.innerWidth <= 768 && a.classList.add("mobile")
			},
			_actionButton: function() {
				var c = a.querySelector(".button-content");
				c.addEventListener("click", function() {
					b._openSlide()
				}, !1)
			},
			_openSlide: function() {
				a.classList.contains("open") ? (a.classList.remove("open"), a.querySelector(".overlay-wrap").removeAttribute("style")) : a.classList.add("open")
			}
		};
		b._initialize()
	}
};
$(document).ready(function() {
	document.querySelectorAll(".dft-overlay-content").length && dft_overlay_content.init()
});
var dft_slider_slick = {
	init: function() {
		for(var a = document.querySelectorAll(".dft-slider-slick"), b = 0; b < a.length; b++) this.load(a[b])
	},
	load: function(a) {
		var b = {
			options: {},
			_initalize: function() {
				this._validate()
			},
			_validate: function() {
				"undefined" !== typeof $.fn.slick && (this._options(), 1 == this.options.full ? this._slider() : this._cards())
			},
			_options: function() {
				if("undefined" !== typeof a.dataset.options) {
					var b = JSON.parse(a.dataset.options);
					this.options = b, a.removeAttribute("data-options")
				} else this.options = {
					theme: "dark",
					h: 300,
					w: 245,
					bg: "#fff",
					radius: !1,
					center: !0
				}
			},
			_slider: function() {
				b._theme(), $(a).addClass("full"), $(a).slick({
					dots: !0,
					infinite: !1,
					arrows: !1
				})
			},
			_cards: function() {
				this._buildCards(), "undefined" == typeof b.options.media && "undefined" == typeof a.dataset.slick ? $(a).slick({
					centerMode: !0,
					dots: !0,
					infinite: !1,
					variableWidth: !0,
					arrows: !1
				}) : "undefined" == typeof b.options.media && "undefined" != typeof a.dataset.slick ? $(a).slick({
					variableWidth: !0
				}) : this._media()
			},
			_buildCards: function() {
				$(a).on("init", function() {
					$(this).find(".slick-track").css({
						height: b.options.h
					}), $(this).find(".slick-slide").css({
						width: b.options.w,
						borderRadius: b._radius(),
						backgroundColor: b.options.bg
					}), b._center(), b._theme()
				})
			},
			_center: function() {
				1 == this.options.center && $(a).addClass("center")
			},
			_theme: function() {
				$(a).addClass("light" == this.options.theme ? "light" : "dark" == this.options.theme ? "dark" : "dark")
			},
			_radius: function() {
				return this.options.radius !== !1 ? this.options.radius : 0
			},
			_media: function() {
				for(var c = this, d = function(d) {
						return window.innerWidth <= b.options.media[d].bp ? ($(a).on("init", function() {
							$(this).find(".slick-track").css({
								height: b.options.media[d].h
							}), $(this).find(".slick-slide").css({
								width: b.options.media[d].w
							})
						}), $(a).slick({
							variableWidth: !0
						}), "break") : window.innerWidth > b.options.media[d].bp ? (c._buildCards(), $(a).slick({
							variableWidth: !0
						}), "break") : void 0
					}, e = 0; e < b.options.media.length; e++) {
					var f = d(e);
					if("break" === f) break
				}
			}
		};
		b._initalize()
	}
};
document.addEventListener("DOMContentLoaded", function() {
	document.querySelectorAll(".dft-slider-slick").length && dft_slider_slick.init()
}, !1);
var dft_slider_twoBox = {
	init: function() {
		for(var a = document.querySelectorAll(".dft-slider-twoBox"), b = 0; b < a.length; b++) this.load(a[b])
	},
	load: function(a) {
		var b = {
			main: $(a),
			device: navigator.userAgent.match(/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i),
			_initialize: function() {
				this._translateInit(), this._slider(), a.querySelector(".paginator-item .paginator-item__button.prev").classList.add("off")
			},
			_translateInit: function() {
				var a = this._getTotalHeightImage() - this._getHeightWrap();
				this._getElements().image.style.transform = "translateY(-" + a + "px)", this._getElements().text.style.transform = "translateY(0px)"
			},
			_getTotalHeightImage: function() {
				for(var b = a.querySelectorAll(".twoBox-image .twoBox-image__content"), c = 0, d = 0; d < b.length; d++) c += b[d].clientHeight;
				return c
			},
			_getHeightWrap: function() {
				return a.querySelector(".dft-image-twoBox__wrap").clientHeight
			},
			_getTotalImages: function() {
				return a.querySelectorAll(".twoBox-image .twoBox-image__content").length
			},
			_getTransformValue: function() {
				return {
					image: parseFloat(window.getComputedStyle(a.querySelector(".twoBox-image")).getPropertyValue("transform").split(",")[5].split(")")[0]),
					text: parseFloat(window.getComputedStyle(a.querySelector(".twoBox-box")).getPropertyValue("transform").split(",")[5].split(")")[0])
				}
			},
			_getElements: function() {
				return {
					image: a.querySelector(".twoBox-image"),
					text: a.querySelector(".twoBox-box")
				}
			},
			_offButton: function(b) {
				1 == b ? a.querySelector(".paginator-item .paginator-item__button.prev").classList.add("off") : b < this._getTotalImages() && null !== a.querySelector(".paginator-item .paginator-item__button.off") ? a.querySelector(".paginator-item .paginator-item__button.off").classList.remove("off") : b == this._getTotalImages() && a.querySelector(".paginator-item .paginator-item__button.next").classList.add("off")
			},
			_slider: function() {
				var b = a.querySelector(".paginator-item .paginator-item__button.next"),
					c = a.querySelector(".paginator-item .paginator-item__button.prev");
				this._sliderNext(b), this._sliderPrev(c)
			},
			_sliderNext: function(a) {
				a.addEventListener("click", b._translateAnimate, !1)
			},
			_sliderPrev: function(a) {
				a.addEventListener("click", b._translateAnimate, !1)
			},
			_translateAnimate: function() {
				var c = a.querySelector(".paginator-item__text"),
					d = parseInt(c.innerText.split("/")[0]),
					e = b._getHeightWrap(),
					f = void 0,
					g = void 0,
					h = 0,
					i = 1;
				if(d < b._getTotalImages() && this.classList.contains("next")) {
					var j = setInterval(function() {
						var a = b._getTransformValue().image,
							c = b._getTransformValue().text;
						f = e / 100 + a, g = c - e / 100, h < 100 ? (b._getElements().image.style.transform = "translateY(" + f + "px)", b._getElements().text.style.transform = "translateY(" + g + "px)", h++) : clearTimeout(j)
					}, i);
					d++
				} else if(d > 1 && this.classList.contains("prev")) {
					var k = setInterval(function() {
						var a = b._getTransformValue().image,
							c = b._getTransformValue().text;
						f = a - e / 100, g = c + e / 100, h < 100 ? (b._getElements().image.style.transform = "translateY(" + f + "px)", b._getElements().text.style.transform = "translateY(" + g + "px)", h++) : clearTimeout(k)
					}, i);
					d--
				}
				c.innerText = d + "/" + b._getTotalImages(), b._offButton(d)
			}
		};
		b._initialize()
	}
};
$(document).ready(function() {
	document.querySelectorAll(".dft-slider-twoBox").length && dft_slider_twoBox.init()
});
var dft_sucursalCarousel = {
	init: function() {
		if($(".dft-sucursal-carousel").length)
			for(var a = 0; a < $(".dft-sucursal-carousel").length; a++) this.sucursal($(".dft-sucursal-carousel")[a])
	},
	sucursal: function(a) {
		var b = {
			main: $(a),
			dots: $(a).find(".dft-sucursal-carousel__nav"),
			content: $(a).find(".dft-sucursal-carousel__content"),
			items: $(a).find(".dft-sucursal-carousel__list"),
			wrapperItems: 0,
			wrapperMain: 0,
			moving: 0,
			swipe: {
				start: 0,
				end: 0,
				right: 0,
				left: 0,
				moving: 0
			},
			current: {
				itemWidth: 0,
				itemData: 0,
				move: 0,
				wrapper: 0
			},
			device: {
				mobile: navigator.userAgent.match(/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i)
			},
			_load: function() {
				this._resize(), this.device.mobile && window.innerWidth <= 767 ? (this._buildWrapper(), this._swipeMobile()) : this.device.mobile && window.innerWidth > 767 ? this._validateDesktop() : window.innerWidth <= 767 ? (this._buildWrapper(), this._validateDesktop(), this._moveDesktop()) : (this._validateDesktop(), this._moveDesktop())
			},
			_buildWrapper: function() {
				this.wrapperItems = window.innerWidth;
				for(var a = 0; a < this.items.length; a++) this.items.eq(a).width(this.wrapperItems);
				this.wrapperMain = this.wrapperItems * this.items.length, this.content.width(this.wrapperMain)
			},
			_resize: function() {
				window.addEventListener("resize", function() {
					window.innerWidth <= 767 ? (b._buildWrapper(), b._validateDesktop(), b._adjustWrapper()) : b._reset()
				}, !1)
			},
			_reset: function() {
				this.content.attr("style") && (this.content.removeAttr("style"), this.items.removeAttr("style"), this.content.find(".dft-sucursal-carousel__list").removeClass("active"), this.dots.find(".dft-sucursal-carousel__list").eq(0).addClass("active"), this.dots.find(".dft-sucursal-carousel__dot").removeClass("active"), this.dots.find(".dft-sucursal-carousel__dot").eq(0).addClass("active"), this.moving = 0)
			},
			_validateDesktop: function() {
				this.main.hasClass("no-mobile") || this.main.addClass("no-mobile")
			},
			_adjustWrapper: function() {
				this.current.wrapper = 0, this.current.item = this.content.find(".dft-sucursal-carousel__list.active"), this.current.itemWidth = this.current.item.innerWidth(), this.current.itemData = this.current.item.data("target");
				for(var a = 0; a < this.current.itemData - 1; a++) this.current.wrapper -= this.items.eq(a).width();
				this.content.css({
					left: this.current.wrapper
				}), this.moving = this.current.wrapper
			},
			_moveDesktop: function() {
				this.dots.find(".dft-sucursal-carousel__dot").on("click", function() {
					var a = $(this).data("dot"),
						c = b.dots.find(".dft-sucursal-carousel__dot.active").data("dot");
					if(b.content.find(".dft-sucursal-carousel__list.active").removeClass("active"), b.content.find('.dft-sucursal-carousel__list[data-target="' + a + '"]').addClass("active"), !$(this).hasClass("active"))
						if(b.dots.find(".dft-sucursal-carousel__dot.active").removeClass("active"), $(this).addClass("active"), b.items.find(".dft-sucursal-carousel"), 1 == a) b.moving = 0;
						else if(a > c)
						for(var d = 0; d < a - c; d++) b.moving -= b.items.eq(d).width();
					else if(a < c)
						for(var e = c - a; e > 0; e) b.moving += b.items.eq(e).width();
					b.content.animate({
						left: b.moving
					}, 800)
				})
			},
			_swipeMobile: function() {
				for(var a = 0; a < this.items.length; a++) this.items[a].addEventListener("touchstart", function(a) {
					self = $(this), b.swipe.start = a.changedTouches[0].clientX, b.swipe.right = b.swipe.start + 50, b.swipe.left = b.swipe.start - 50
				}), this.items[a].addEventListener("touchend", function(a) {
					b.swipe.end = a.changedTouches[0].clientX, b.swipe.start != b.swipe.end && (b.swipe.right < b.swipe.end ? (b.swipe.moveRight = !0, b.swipe.moveLeft = !1) : b.swipe.left > b.swipe.end ? (b.swipe.moveRight = !1, b.swipe.moveLeft = !0) : (b.swipe.moveRight = !1, b.swipe.moveLeft = !1), b._moveMobile(self))
				})
			},
			_moveMobile: function(a) {
				var c = this.dots.find(".dft-sucursal-carousel__dot.active");
				1 == a.prev().data("target") && b.swipe.moveRight ? (this.swipe.moving = 0, a.removeClass("active"), a.prev().addClass("active"), c.prev().addClass("active"), c.removeClass("active")) : a.next().length && b.swipe.moveLeft ? (this.swipe.moving -= window.innerWidth, a.removeClass("active"), a.next().addClass("active"), c.next().addClass("active"), c.removeClass("active")) : a.prev().length && b.swipe.moveRight && (this.swipe.moving += window.innerWidth, a.removeClass("active"), a.prev().addClass("active"), c.prev().addClass("active"), c.removeClass("active")), this.content.animate({
					left: this.swipe.moving
				}, 800)
			}
		};
		b._load()
	}
};
$(document).ready(function() {
	dft_sucursalCarousel.init()
});
var dft_tabs_general = {
	init: function() {
		for(var a = document.querySelectorAll(".dft-tabs-general"), b = 0; b < a.length; b++) this.load(a[b])
	},
	load: function(a) {
		var b = {
			nav: a.querySelector(".dft-tabs-general__buttons"),
			content: a.querySelector(".dft-tabs-general__content"),
			_initialize: function() {
				this._displayElements(), this._activeElements(), this._tabElement()
			},
			_displayElements: function() {
				for(var a = this.content.querySelectorAll(".general-content"), b = 0; b < a.length; b++) a[b].style.display = 0 == b ? "block" : "none"
			},
			_activeElements: function() {
				this.nav.querySelectorAll(".buttons-content__items")[0].classList.contains("active") ? !0 : this.nav.querySelectorAll(".buttons-content__items")[0].classList.add("active"), this.content.querySelectorAll(".general-content")[0].classList.contains("active") ? !0 : this.content.querySelectorAll(".general-content")[0].classList.add("active")
			},
			_tabElement: function() {
				for(var a = this.nav.querySelectorAll(".buttons-content__items button"), c = 0; c < a.length; c++) a[c].addEventListener("click", function() {
					b.nav.querySelector(".buttons-content__items.active").classList.remove("active"), this.parentNode.parentNode.classList.add("active");
					var a = b.content.querySelector(".general-content.active");
					a.classList.remove("active"), a.style.display = "none";
					var c = b.content.querySelector("[data-target=" + $(this).data("tab") + "]");
					if(c.classList.add("active"), c.style.display = "block", c.querySelectorAll(".dft-image-full").length)
						for(var d = {
								items: c.querySelectorAll(".dft-image-full"),
								image: ""
							}, e = 0; e < d.items.length; e++) d.items[e].querySelector(".dft-image-full__wrap").hasAttribute("data-image") && (d.image = d.items[e].querySelector(".dft-image-full__wrap").getAttribute("data-image"), d.items[e].querySelector(".dft-image-full__wrap").setAttribute("style", d.image), d.items[e].querySelector(".dft-image-full__wrap").removeAttribute("data-image"))
				}, !1)
			}
		};
		b._initialize()
	}
};
$(document).ready(function() {
	document.querySelectorAll(".dft-tabs-general").length && dft_tabs_general.init()
});
var dft_tabs = {
	init: function() {
		if($(".dft-tabs").length)
			for(var a = 0; a < $(".dft-tabs").length; a++) this.tabs($(".dft-tabs")[a])
	},
	tabs: function r(a) {
		var r = {
			main: $(a),
			options: $(a).find(".dft-tabs__list"),
			content: $(a).find(".dft-tabs__description-item"),
			arrows: $(a).find(".dft-tabs__description-arrow"),
			_loadActive: function() {
				r.options.eq(0).hasClass("tab-active") ? !1 : r.options.eq(0).addClass("tab-active"), r.content.eq(0).hasClass("item-active") ? !1 : r.content.eq(0).addClass("item-active"), this._desktopTabs(), this._mobileActive()
			},
			_desktopTabs: function() {
				this.options.on("click", function(a) {
					if(a.preventDefault(), !$(this).hasClass("tab-active")) {
						var b = $(this).find(".dft-tabs__links").data("target");
						r.main.find(".dft-tabs__description-item.item-active").removeClass("item-active"), r.main.find(".dft-tabs__list.tab-active").removeClass("tab-active"), $(this).addClass("tab-active"), r.main.find('.dft-tabs__description-item[data-tab="' + b + '"]').addClass("item-active")
					}
				})
			},
			_mobileActive: function() {
				this.arrows.on("click", function() {
					if(!$(this).parent().hasClass("item-active")) {
						r._upTop($(this).parent());
						var b = $(this).parent().attr("data-tab");
						r.main.find(".dft-tabs__description-item.item-active").removeClass("item-active"), r.main.find(".dft-tabs__list.tab-active").removeClass("tab-active"), $(this).parent().addClass("item-active"), r.main.find('.dft-tabs__list .dft-tabs__links[href="' + b + '"]').parent().addClass("tab-active")
					}
				})
			},
			_upTop: function(a) {
				var b = $("#h_menu").length ? $("#h_menu").find(".sec_title").height() : 0;
				setTimeout(function() {
					$("html, body").animate({
						scrollTop: a.offset().top - b
					}, 1e3)
				}, 500)
			}
		};
		r._loadActive()
	}
};
$(document).ready(function(a) {
	dft_tabs.init();
	var b = a(".dft-nav-nowrap__nav-content");
	b.length > 0 && b.scrollLeft(b.find(".nowrap-item.active").position().left / 3)
});